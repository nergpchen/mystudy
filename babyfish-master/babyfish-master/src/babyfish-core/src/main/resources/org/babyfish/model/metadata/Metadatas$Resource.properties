badDerivedProvider                                  = The object model interface "{0}" is invalid, it uses the provider "{1}", but the super object model interface "{2}" uses the provider "{3}"
badDerivedMode                                      = The object model interface "{0}" is invalid, it uses the mode "{1}", but the super object model interface "{2}" uses the mode "{3}"
badRelatedObjectModelProvider                       = The object model interface "{0}" is invalid, it uses the provider "{1}", this interface has an method "{2}" that depends on class "{3}", that class uses "{4}" to be its object model interface, but that object model interface used the provider "{5}"              
duplicatedStaticMethodToGetOM                       = Both the method "{0}" and "{1}" is marked by annotation "{2}", this is not allowed.
methodToGetOMMustBeStatic                           = The method "{0}" is marked by annotation "{1}" but it is not static.
staticMethodToGetOMMustNotBeDefault                 = The method "{0}" is marked by annotation "{1}" but it is private, it can not be private, protected or public, it must be ""(default).
badStaticMethodToGetOM                              = The method "{0}" is marked by annotation "{1}", it must contain a parameter whose type is "{2}" and return "{3}" or "{4}".
noStaticMethodToGetOM                               = There must be an static method marked by annotation "{1}" in the type "{0}".
objectModelClassMustBeInterface                     = The type "{0}" must be interface because it has been marked by "{1}".
badSuperInterfaceOfObjectModel                      = The object model interface "{0}" is invalid, if it extends another super interface, that super interface must be "{1}"
tooManyObjectModelClasses                           = There are too many nested types marked by "{1}" under "{0}".
noObjectModelClasses                                = There must be one type marked by "{1}" under "{0}".
invalidAssociationClass                             = The association method "{0}" is invalid, its return type must be one of these types: "{1}".
associationMethodMissGenericArguments               = The association method "{0}" is invalid, its type parameter of its return type must be specified.
associationMethodMustHaveNoParameters               = The association method "{0}" is invalid, it should contain no parameters.
associationMethodMustThrowNoExceptions              = The association method "{0}" is invalid, it should throw no checked exceptions.
associationMethodMissAnnotation                     = The association method "{0}" is invalid, it should be marked by "{1}".
invalidOppositeAssociationName                      = The association method "{0}" is invalid, it has been marked by "{1}" whose property "opposite" is "{2}", but there is no method whose name is "{2}" in the object model interface "{3}"
invalidOppositeAssociationMethod                    = The association method "{0}" is invalid, it has been marked by "{1}" whose property "opposite" is "{2}", but the method whose name is "{2}" in the object model interface "{3}" is not marked by "{1}"
oppositeReferenceConflict                           = Both the association method "{0}" and "{1}" uses the annotation "{2}" to refer the opposite association method "{3}", this is conflict.
invalidBidirectionalAssociations                    = The association methods "{0}" and "{1}" can not create a pair of bidirectional associations because the former uses the annotation "{2}" to refer the latter, but the latter does not use refer the former as a corresponding solution.
invalidAssociationEndTypePair                       = The association methods "{0}" and "{1}" can not create a pair of bidirectional associations because their return types can not work normally together, the valid end point type pairs are "{2}".
mustHaveNoTypeParameters                            = The method "{0}" is invalid, it must have no type parameters.
canNotThrowCheckedException                         = The method "{0}" is invalid, it can not throw the exception whose type is neither "java.lang.RuntimeException" nor "java.lang.Error".
badParameterCountOfMethod                           = The method "{0}" is invalid, it must have zero or one parameter.
mustReturnVoidBecauseThereIsOneParameter            = The method "{0}" is invalid, it has one parameter so that it must return void.
mustStartWithSet                                    = The method "{0}" is invalid, it has one parameter so that its name must start with "set".
mustNotReturnVoidBecauseThereIsNoParameters         = The method "{0}" is invalid, it has no parameters so that it must not return void.
mustStartWithGetOrIs                                = The method "{0}" is invalid, it has no parameter so that its name must start with "get" or start with "is" if it returns boolean value.
propertyHasBeenDeclarationInSuperMetadata           = The method "{0}" is invalid, it has been declared in the super object model "{1}".
noGetterForScalarSetter                             = The method "{0}" is invalid, because it is the setter of a scalar property but there is no getter method such as "{1} {2}.{3}()".
noSetterForScalarGetter                             = The method "{0}" is invalid, because it is the getter of a scalar property but there is no setter method such as "void {1}.{2}({3} value)".
invalidAnnotationsOfScalarSetter                    = The method "{0}" is invalid, because it is the setter of a scalar property so that it can not be marked by any annotation.
conflictAnnotationAnnotations                       = The method "{0}" is invalid, because the annotation "@{1}" is invalid, that annotation is marked by two conflict annotations, "@{2}" and "@{3}".
conflictAnnotations                                 = The method "{0}" is invalid, because it is marked by two conflict annotations, one is "@{1}" which is marked by "@{2}" and the other one is "@{3}" which is marked by  "@{4}".
classIsNotFirstLowerTypeInScalarOnly                = The method "{0}" is invalid, because the annotation "@{1}" is invalid, that annotation is marked by the annotation"@{2}" so that its property "{3}" can only accept a class(not interface) type as the first element.
badLowerAndUpperInScalarOnly                        = The method "{0}" is invalid, because the annotation "@{1}" is invalid, that annotation is marked by the annotation"@{2}" whose property "{3}" contains "{4}" and whose property "{5}" is "{6}", but "{6}" is not the derived type of "{4}".
scalarTypeOutOfLowerBound                           = The method "{0}" is invalid, because the annotation "@{1}" that is used to mark it is marked by "@{2}" with the argument "{3}" to indicate the property type must be the derived type of "{4}", but the actual property type "{5}" is not a derived type of it.
scalarTypeOutOfUpperBound                           = The method "{0}" is invalid, because the annotation "@{1}" that is used to mark it is marked by "@{2}" with the argument "{3}" to indicate the property type must be the ancestor type of "{4}", but the actual property type "{5}" is not a ancestor type of it.
associatedEndpointTypeOutOfBound                    = The method "{0}" is invalid, because the annotation "@{1}" that is used to mark it is marked by "@{2}" with the argument "{3}" to indicate that the property's associated end type be one of "{4}", but the actual property associated end type "{5}" is neither one of it.
propertyIsNeigthScalarNorAssociation                = The method "{0}" is invalid, because it has not been marked by some annotation which is marked by "@{1}" or "{2}".
noAssociationAnnotationForAssociationProperty       = The method "{0}" is invalid, because it must been marked by "@{1}" when it has been marked by other annotation which is marked by "{2}".
objectModelComparatorPropertiesAreDuplicated        = The object model interface "{0}" is invalid, because it has been marked by the annotation "@{1}" to specified the key property names \"{2}\", but the key property name "{3}" is duplicated.
noComparatorForSortedSet                            = The association method "{0}" of "{1}" is invalid, its return type is compatible with "{2}", but there is no annotation "@{3}" on the this association property or the opposite ObjectModel interface "{4}", or the annotation specify no properties. 
objectModelKeyPropertyIsNotExisting                 = The object model interface "{0}" is invalid, because it has been marked by the annotation "@{1}" to specified the key property names \"{2}\", but the key property "{3}" is not existing.
objectModelKeyPropertyIsNotScalar                   = The object model interface "{0}" is invalid, because it has been marked by the annotation "@{1}" to specified the key property names \"{2}\", but the key property "{3}" is not a scalar property.
objectModelKeyPropertyIsDeferrable                  = The object model interface "{0}" is invalid, because it has been marked by the annotation "@{1}" to specified the key property names \"{2}\", but the key property "{3}" is not is marked by "@{4}".
objectModelKeyPropertyHasBadType                    = The object model interface "{0}" is invalid, because it has been marked by the annotation "@{1}" to specified the key property names \"{2}\", but type of the key property "{3}" is "{4}".
associationComparatorPropertiesAreDuplicated        = The association method "{0}" of the object model interface \"{1}\" is invalid, because it has been marked by the annotation "@{2}" to specified the key property names \"{3}\" but the key property name "{4}" is duplicated
associationKeyPropertyIsNotExisting                 = The association method "{0}" of the object model interface \"{1}\" is invalid, because it has been marked by the annotation "@{2}" to specified the key property names \"{3}\" but the key property "{4}" is not existing in the opposite object model interface \"{5}\".
associationKeyPropertyIsNotScalar                   = The association method "{0}" of the object model interface \"{1}\" is invalid, because it has been marked by the annotation "@{2}" to specified the key property names \"{3}\" but the key property "{4}" in the opposite object model interface \"{5}\" is not a scalar property.
associationKeyPropertyIsDeferrable                  = The association method "{0}" of the object model interface \"{1}\" is invalid, because it has been marked by the annotation "@{2}" to specified the key property names \"{3}\" but the key property "{4}" in the opposite object model interface \"{5}\" is is marked by "@{6}".
associationKeyPropertyHasBadType                    = The association method "{0}" of the object model interface \"{1}\" is invalid, because it has been marked by the annotation "@{2}" to specified the key property names \"{3}\" but the type of key property "{4}" in the opposite object model interface \"{5}\" is "{6}".
specifiedPropertyIsNotScalarProperty                = In the object model interface "{0}", the property whose id is "{1}" is not a scalar property
specifiedPropertyIsNotAssociationProperty           = In the object model interface "{0}", the property whose id is "{1}" is not a association property
noProperty                                          = There is no property named "{1}" in the object model interface "{0}"
noScalarProperty                                    = There is no scalar property named "{1}" in the object model interface "{0}"
noAssociationProperty                               = There is no association property named "{1}" in the object model interface "{0}"
propertyNameCanNotBeAnyOf                           = The property name of object model interface can not any one of these names: "{0}"
bothAssociationOnlyAndContravariance                = Bad association property method "{0}", it can not be marked by both "{1}" and "{2}"
associationCanNotBeView                             = Bad association property method "{0}", its return type can not be "{1}" 
associationMustBeAnyOf                              = Bad association property method "{0}", its return type must be any one of these types: "{1}"
propertyMustMarkedByContravariance                  = The method "{0}" must be marked by "{1}"
mustHaveSuperObjectModel                            = The object model interface "{0}" contains a method "{1}" that is marked by the anotation "@{2}", but the owner class does not use another class with object model to be its super class
noBaseProperty                                      = The association method "{0}" is marked by the annotation "@{1}" with the parameter "{2}", but there is no such assocation property "{2}" in the super object model interface "{3}"  
invalidBasePropertyType                             = The association method "{0}" is marked by the annotation "@{1}" with the parameter "{2}", but the type of the base property "{2}" in the super object model interface "{3}" is not "{4}"
invalidBasePropertyKeyType                          = The association method "{0}" is marked by the annotation "@{1}" with the parameter "{2}", this java type of the association is "{3}" that uses "{4}" to be its key type, but the key type of the base property "{2}" in the super object model interface "{5}" is "{6}"
invalidBasePropertyElementType                      = The association method "{0}" is marked by the annotation "@{1}" with the parameter "{2}", its return type is a collection that element type is "{3}", but the element type of the base property "{2}" in the super object model interface "{4}" is "{5}" that is not the ancestor type of "{3}"
ownerMustBeReference                                = The method "{0}" is invalid, it is marked by the annotation "@{1}" that is marked by "@{2}" so the expected mode of the current object model interface is "{3}", but it actually is "{4}"
propertyMustNotBeDeferrable                         = The method "{0}" is invalid, it is marked by the annotation "@{1}" that is market by "@{2}" so the method can not be marked by "@{3}"
scalarCanNotBeReference                             = The object model interface "{0}" is invalid, its scalar property "{1}" can not return another class uses the object model whose object model mode is "{2}"
noDisabilityInSuperObjectModel                      = The object model interface "{0}" is invalid, it is marked by the annotation "@{1}" but the super object interface "{2}" is not marked by it
invalidTypeLevelReferenceComparasionRule            = The object model interface "{0}" is invalid, its mode is "{1}" so that it can not be marked by the annotation "@{2}"
invalidTypeLevelReferenceComparasionRuleValue       = The object model interface "{0}" is invalid, it is marked by the annotation "@{1}" with the parameter "{2}" that does not match the regular expression "{3}"
invalidPropertyLevelReferenceComparasionRuleValue   = The association property "{0}" is invalid, it is marked by the annotation "@{1}" with the parameter "{2}" that does not match the regular expression "{3}"
requireEmbeddableComparasionRule                    = The object model interface "{0}" is invalid, its mode is "{1}" so that the annotation argument "{2}" must be specified
invalidEmbeddableComparasionRule                    = The object model interface "{0}" is invalid, its annotation argument "{1}" is "{2}" that does not match the regular expression "{3}"
invalidEmbeddablePropertyCount                      = The object model interface "{0}" is invalid, its annotation argument "{1}" specify {2} properties but it actually contains {3} declared properties
invalidEmbeddableComparasionPropertyName            = The object model interface "{0}" is invalid, its annotation argument "{1}" specify a property "{2}" that is not existing
referenceDoesNotSupportDefaultComparator            = Can not invoke the "{1}" on the meta data of object model interface "{0}" because its mode is "{2}" 
scalarCanNotReturnAbstractObjectModel               = The scalar property "{0}" returns the class "{1}" that use "{2}" to be its object model interface, it is not allowed because the mode of that object model is "{3}"
complexScalarCanNotBeDeferrable                     = The scalar property "{0}" return another class uses another object model so that is can not be marked by the annotation "@{1}"
keyTypeMustBeEmbeddable                             = The key type of the association property "{0}" is "{1}" that uses "{2}" to be its object model type, the expected mode of "{2}" is "{3}", but actually it is "{4}"
oppositeOwnwerTypeMustBeReference                   = The opposite type of the association property "{0}" is "{1}" that uses "{2}" to be its object model type, the expected mode of "{2}" is "{3}", but actually it is "{4}"
keyTypeMustBeClass                                  = The key type of the association property "{0}" is "{1}", it must be a class
keyTypeMustBeObjectModelOwnerClass                  = The key type of the association property "{0}" is "{1}", it must be a class that uses object model
relatedTypeMustBeClass                              = The related type of the property "{0}" is "{1}" it must be a class
relatedTypeMustBeObjectModelOwnerClass              = The related type of the property "{0}" is "{1}" it must be a class that uses object model
onlyReferenceCanMissOpposite                        = The association method "{0}" is invalid, it is marked by the annotation "@{1}" without the parameter "opposite", the unidirectional association is only allowed for the method whose return type is "{2}"
deferrablePropertyCanNotBeComparatorField           = The scalar property "{0}" is invalid, it is marked by the annotation "@{1}" so that it can not be a field that is used by "{2}"
badTypescalarPropertyCanNotBeComparatorField        = The scalar property "{0}" is invalid, its type is "{1}" so that it can not be a field that is used by "{2}"
deferrablePropertyRequiredReferenceModel            = The scalar property "{0}" is marked by the annotation "@{1}", so it must be declared in the ObjectModel interface whose type is "{2}", but actually the mode is "{3}"
unstablePropertyRequiredReferenceModel              = The type of scalar property "{0}" is "{1}", so it must be declared in the ObjectModel interface whose type is "{2}", but actually the mode is "{3}"
