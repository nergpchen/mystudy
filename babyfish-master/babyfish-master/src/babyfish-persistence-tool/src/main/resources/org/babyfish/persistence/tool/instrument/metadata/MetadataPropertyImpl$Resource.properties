conflictAccessTypes                             = The property "{0}.{1}" is invalid, it declares conflict values of "{2}"
typeArgumentMustBeClass                         = The property "{0}.{1}" is invalid, its type is "{2}", but the type argument "{3}" of that type is not class
emptyJonColumnName                              = The property "{0}.{1}" is invalid, it uses "@{2}" without name
emptyJoinColumns                                = The property "{0}.{1}" is invalid, it uses "@{2}" without "@{3}"
illegalJoinColumnOnMultipColumns                = The property "{0}.{1}" is invalid, it uses "@{2}" to reference the class "{3}" but the id property "{4}" of the target is an embedded object with more the one columns
canNotUseMappedByWith                           = The property "{0}.{1}" is invalid, it uses "@{2}" with the argument "mappedBy", this is not allowed when it uses "@{3}" too
annotationRequiresAnyOneType                    = The property "{0}.{1}" is invalid, it uses "@{2}" so that its type must be any one of "{3}"
annotationCanOnlyBeUsedWith                     = The property "{0}.{1}" is invalid, it can not use "@{2}" because it does not use any of of these annotations: "{3}"
inverseCollectionMustUseMappedBy                = The property "{0}.{1}" is invalid, it is collection so that it can only use the "mappedBy" of "@{2}" to be inverse side
implicitInverseMustBeDifferent                  = The property "{0}.{1}" is invalid, its inverse is "{2}" and the inverse of opposite property "{3}.{4}" is "{5}" too
canNotCollectInverse                            = The property "{0}.{1}" is invalid, in ObjectModel4JPA, all the argument "insertable" or "updatable" of join configuration "{2}" should be same. 
unidirectionalCanNotBeCollection                = The property "{0}.{1}" is invalid, in ObjectModel4JPA, only reference association can be unidirectional
conflictBidirectionalAssociation                = The property "{0}.{1}" uses "@{2}" with the argument 'mappedBy="{3}"' in order to create bidirectional association with "{4}.{3}", but that property is already used to create bidirectional association with "{5}.{6}"  
targetOfMappedByCanNotUseMappedBy               = The property "{0}.{1}" uses "@{2}" with the argument 'mappedBy="{3}"' in order to create bidirectional association with "{4}.{3}", but the annotation "@{5}" of that property uses the argument "mappedBy" too
mappedByOwnerIsWrong                            = The property "{0}.{1}" uses "@{2}" with the argument 'mappedBy="{3}"' in order to create bidirectional association with "{4}.{3}", but that property does not related to the declaring class of this property
mappedByIsNotAssociation                        = The property "{0}.{1}" uses "@{2}" with the argument 'mappedBy="{3}"' in order to create bidirectional association with "{4}.{3}", but that property is not an association property
unknownMappedBy                                 = The property "{0}.{1}" uses "@{2}" with the argument 'mappedBy="{3}"' in order to create bidirectional association with "{4}.{3}", but that property is not existing
illlegalRelatedOrderColumnType                  = The property "{0}.{1}" uses "@{2}" with the argument "{3}" to specify the list index column, but the type of that property whose column name is "{3}" in the related class "{4}" is not int
unknownRelatedOrderColumn                       = The property "{0}.{1}" uses "@{2}" with the argument "{3}" to specify the list index column and the value "{5}" of its primary annotation "@{4}" has been specified, but the property whose column name is "{3}" is not existing in the related class "{6}"
illlegalRelatedMapKeyColumnType                 = The property "{0}.{1}" uses "@{2}" with the argument "{3}" to specify the map key column, but the type of that property whose column name is "{3}" in the related class "{4}" is not the expected type "{5}", it is "{6}" actually
unknownRelatedMapKeyColumn                      = The property "{0}.{1}" uses "@{2}" with the argument "{3}" to specify the map key column and the value "{5}" of its primary annotation "@{4}" has been specified, but the property whose column name is "{3}" is not existing in the related class "{6}"
illlegalRelatedMapKeyType                       = The property "{0}.{1}" uses "@{2}" with the argument "{3}" to specify the map key, but the type of that property in the related class "{4}" is not the expected type "{5}", it is "{6}" actually
relatedMapKeyMustBe                             = The property "{0}.{1}" uses "@{2}" with the argument "{3}" to specify the map key, but that property in the related class "{4}" does not use any annotation of "{5}" 
unknownRelatedMapKey                            = The property "{0}.{1}" uses "@{2}" with the argument "{3}" to specify the map key, but that property in the related class "{4}" is not existing
listRequiresOrderColumnValueInObjectModel4JPA   = The property "{0}.{1}" is invalid, it uses "@{2}" with no argument, this is not allowed in ObjectModel4JPA
listRequiresOrderColumnInObjectModel4JPA        = The property "{0}.{1}" is invalid, its type is "{2}" but it does not use "@{3}", this is not allowed in ObjectModel4JPA 
relatedClassMustBeEntity                        = The property "{0}.{1}" uses "@{2}" to related another class {3}, but that class does not use "@{4}"
conflictAnnotations                             = The property "{0}.{1}" is invalid, it can not use both "@{2}" and "@{3}"
annotationIsNotSupportedInObjectModel4JPA       = The property "{0}.{1}" is invalid, it can not use "@{2}" in ObjectModel4JPA
collectionMustBeGenericType                     = The property "{0}.{1}" is invalid, it uses "@{2}" but not generic type, this is not allowed in ObjectModel4JPA
badCollectionType                               = The property "{0}.{1}" is invalid, it uses "@{2}" so that its type can only be any one of "{3}"
typeDescriptorMustBeClass                       = The property "{0}.{1}" references another class "{2}", but that class is not a custom class 
canNotOverrideDeepProperties                    = The property "{0}.{1}" uses "@{2}" in order override some properties of the embeddable class "{3}" but these properties is not existing: "{4}"
incongruousJPAObjectInstrument                  = The property "{0}.{1}" references another class "{2}", the current class can not work with that class because one uses "@{3}" but the other one does not
embeddedTyepIsNotEmbeddable                     = The property "{0}.{1}" uses "@{2}" to reference another class "{3}" but that class does not use "@{4}"
unknownRelatedClass                             = The property "{0}.{1}" uses "@{2}" to reference another class "{3}" but that class is not existing
embeddedCircular                                = The property "{0}.{1}" uses "@{2}" to reference an embedded value, but their is an emedded reference circular: {3}
unknownAccessType                               = The property "{0}.{1}" is invalid, its {2} can not be determined because of some conflict configurations
badFieldAnnotation                              = The property "{0}.{1}" is accessed by {2} so that its field can not use any annotations of JPA 
noPropertyMethod                                = The property "{0}.{1}" is accessed by {2} but no methods for it
badMethodAnnotation                             = The property "{0}.{1}" is accessed by {2} so that its methods can not use any annotations of JPA
noPropertyField                                 = The property "{0}.{1}" is accessed by {2} but no field for it
contravarianceRequiresSuperMetaClass            = The property "{0}.{1}" is illegal, it's marked by the annotation "@{2}", but no super class with ObjectModel4JPA is declared
noCovarianceProperty                            = The property "{0}.{1}" is illegal, it's marked by the annotation "@{2}" with the argument "{3}", but there is no covariance property "{3}" in the super class "{4}" or its ancestor classes
covariancePropertyMustBeAssociation             = The property "{0}.{1}" is illegal, it's marked by the annotation "@{2}" with the argument "{3}", but the covariance property "{4}.{3}" is not association property
illegalCovariancePropertyType                   = The property "{0}.{1}" is illegal, it's marked by the annotation "@{2}" with the argument "{3}" and its type is "{5}", but the type of covariance property "{4}.{3}" is "{6}"
mustNotBeEager                                  = The property "{0}.{1}" is illegal, it's FetchType is "{2}" but its owner class "{0}" is marked by the annotation "{3}" whose argument "{4}" is false. You have 2 choices: (1) Change the FetchType of this property to be "{5}", (2) Change the attribute "{4}" of that annotation to be true; 
