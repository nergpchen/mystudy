package org.babyfishdemo.jpacriteria.base;

import javax.persistence.EntityManagerFactory;

import org.babyfish.hibernate.jpa.HibernatePersistenceProvider;
import org.babyfish.persistence.XEntityManagerFactory;
import org.babyfish.persistence.criteria.QueryTemplate;
import org.babyfish.persistence.criteria.XCriteriaQuery;
import org.junit.AfterClass;
import org.junit.BeforeClass;

/**
 * @author Tao Chen
 */
public abstract class AbstractTest {
    
    protected static XEntityManagerFactory entityManagerFactory;

    @BeforeClass
    public static void initEntityFactory() {
        entityManagerFactory = 
                new HibernatePersistenceProvider()
                .createEntityManagerFactory(null, null);
    }
    
    @AfterClass
    public static void closeEntityFactory() {
        EntityManagerFactory emf = entityManagerFactory;
        if (emf != null) {
            entityManagerFactory = null;
            emf.close();
        }
    }
    
    /*
     * Notes!
     * 
     *      In this demo-project, I use "org.babyfish.persistence.criteria.QueryTemplate"
     * to show you what JPQL has been generated by babyfish-jpa-criteria.
     * 
     *      In real projects, please don't use it unless you want cache the JPQL generation 
     * result in order to do tiny performance optimization. Generically, you'd better use the
     * JPA standard API "EntityManager.createQuery(CriteriaQuery<T>)" and 
     * "org.babyfish.persistence.criteria.QueryTemplate" should be consider as internal interface
     */
    protected static <T> QueryTemplate<T> createQueryTemplate(XCriteriaQuery<T> cq) {
        return entityManagerFactory.createQueryTemplate(cq);
    }
}
