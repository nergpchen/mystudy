package org.babyfishdemo.om4java.dom;

import org.babyfish.collection.MAOrderedMap;
import org.babyfish.collection.event.MapElementAdapter;
import org.babyfish.collection.event.MapElementEvent;
import org.babyfish.collection.event.modification.MapModifications;
import org.babyfish.modificationaware.event.ModificationType;
import org.babyfish.modificationaware.event.PropertyVersion;
import org.babyfishdemo.om4java.dom.common.XPath;
import org.babyfishdemo.om4java.dom.common.XmlBuilder;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

/*
 * Before Learn this test class, it's necessary to understand these 2 points: 
 * 
 * 
 * (1)
 * The property "attributes" of "org.babyfishdemo.om4java.dom.Element" is 
 * "org.babyfish.collection.XOrderedSet<K, V>" that extends "java.util.Map<K, V>", 
 * and it uses the property "quanifiedName" of "org.babyfishdemo.om4java.dom.Attribute" 
 * to be the key. 
 * 
 * Because of "Unstable Collection Elements" of BabyFish Collection Framework, 
 * the map property "attributes" of element will be adjusted automatically and 
 * implicitly when the quanifiedName of some attributes of this element is changed.
 * 
 * 
 * (2)
 * The property "qunifiedName" of "org.babyfishdemo.om4java.dom.Attribute" is an embeddable 
 * model class "org.babyfishdemo.om4java.dom.QuanifiedName" that contains 
 * properties "namespaceURI" and "localName". 
 * 
 * Embeddable class supports bubble event. If the property "namespaceURI" or "localName" 
 * of "org.babyfishdemo.om4java.dom.QuanifiedName" is changed, the event notification can be bubbled 
 * so that another new event about the property "quanifiedNmae" of 
 * "org.babyfishdemo.om4java.dom.Attribute" is changed will be triggered. 
 */
/**
 * @author Tao Chen
 */
public class UnstableMapKeyTest {

    private static final String NS_ASPX = "http://schemas.microsoft.com/AspNet";
    
    private static final XmlBuilder XML_BUILDER = 
            new XmlBuilder()
            .addPrefix("asp", NS_ASPX)
            .readOnly();
    
    private static final XPath XPATH =
            new XPath()
            .addPrefix("asp", NS_ASPX)
            .readOnly();
    
    private Element gridView;
    
    private Attribute autoGenerateColumns;
    
    private Attribute autoGenerateSelectButton;
    
    private Attribute autoGenerateEditButton;
    
    private Attribute autoGenerateDeleteButton;
    
    private Attribute allowPaging;
    
    @Before
    public void create() {
        
        this.gridView = new Element(
                NS_ASPX,
                "GridView",
                new Attribute("ID", "GridView1"),
                new Attribute("runat", "server"),
                new Attribute("DataSourceId", "SqlDataSource1"),
                new Attribute("AutoGenerateColumns", "true"),
                new Attribute("AutoGenerateSelectButton", "true"),
                new Attribute("AutoGenerateEditButton", "true"),
                new Attribute("AutoGenerateDeleteButton", "true"),
                new Attribute("AllowPaging", "true")
        );
        this.autoGenerateColumns = XPATH.selectSingleNode(this.gridView, "@AutoGenerateColumns");
        this.autoGenerateSelectButton = XPATH.selectSingleNode(this.gridView, "@AutoGenerateSelectButton");
        this.autoGenerateEditButton = XPATH.selectSingleNode(this.gridView, "@AutoGenerateEditButton");
        this.autoGenerateDeleteButton = XPATH.selectSingleNode(this.gridView, "@AutoGenerateDeleteButton");
        this.allowPaging = XPATH.selectSingleNode(this.gridView, "@AllowPaging");
        
        
        Assert.assertEquals(
                "<asp:GridView "
                + "xmlns:asp='http://schemas.microsoft.com/AspNet' "
                + "ID='GridView1' "
                + "runat='server' "
                + "DataSourceId='SqlDataSource1' "
                + "AutoGenerateColumns='true' "
                + "AutoGenerateSelectButton='true' "
                + "AutoGenerateEditButton='true' "
                + "AutoGenerateDeleteButton='true' "
                + "AllowPaging='true'/>", 
                XML_BUILDER.build(this.gridView)
        );
    }
    
    @Test
    public void testChangeKeyToNewData() {
        
        MapEventRecorder mer = new MapEventRecorder();
        ((MAOrderedMap<QuanifiedName, Attribute>)this.gridView.getAttributes()).addMapElementListener(mer);
        
        /*
         * (A) Change the attribute.quanifiedName.localName
         */
        {
            this.allowPaging.getQuanifiedName().setLocalName("AllowSorting");
            
            // Maybe from the XML, it is not easy to see what happend
            Assert.assertEquals(
                    "<asp:GridView "
                    + "xmlns:asp='http://schemas.microsoft.com/AspNet' "
                    + "ID='GridView1' "
                    + "runat='server' "
                    + "DataSourceId='SqlDataSource1' "
                    + "AutoGenerateColumns='true' "
                    + "AutoGenerateSelectButton='true' "
                    + "AutoGenerateEditButton='true' "
                    + "AutoGenerateDeleteButton='true' "
                    + "AllowSorting='true'/>", 
                    XML_BUILDER.build(this.gridView));
            
            /*
             * But from the event recorder, it is easy to see
             * (1) The old attribute [AllowPagging="true"] is removed automatically and implicitly
             * (2) The new attribute [AllowSorting="true"] is added automatically and implicitly
             * 
             * That means "this.gridView.getAttributes()" had been adjusted when its key is changed. 
             */
            Assert.assertEquals(
                    "{ "
                    +   "suspend: { "
                    +     "detach: { " // Remove AllowPaging="true"
                    +       "key: { namespaceURI: 'null', localName: 'AllowPaging' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AllowPaging' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "} "
                    + "}"
                    + "{ "
                    +   "resume: { "
                    +     "attach: { " // Add AllowSorting="true"
                    +       "key: { namespaceURI: 'null', localName: 'AllowSorting' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AllowSorting' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "} "
                    + "}", 
                    mer.getEventRecordAndClear()
            );
        }
        
        /*
         * (B) Change the attribute.quanifiedName.namespaceURI
         */
        {
            this.allowPaging.getQuanifiedName().setNamespaceURI(NS_ASPX);
            
            // Maybe from the XML, it is not easy to see what happend
            Assert.assertEquals(
                    "<asp:GridView "
                    + "xmlns:asp='http://schemas.microsoft.com/AspNet' "
                    + "ID='GridView1' "
                    + "runat='server' "
                    + "DataSourceId='SqlDataSource1' "
                    + "AutoGenerateColumns='true' "
                    + "AutoGenerateSelectButton='true' "
                    + "AutoGenerateEditButton='true' "
                    + "AutoGenerateDeleteButton='true' "
                    + "asp:AllowSorting='true'/>", 
                    XML_BUILDER.build(this.gridView));
            
            /*
             * But from the event recorder, it is easy to see
             * (1) The old attribute [AllowSorting="true"] is removed automatically and implicitly
             * (2) The new attribute [asp:AllowSorting="true"] is added automatically and implicitly
             * 
             * That means "this.gridView.getAttributes()" had been adjusted when its key is changed. 
             */
            Assert.assertEquals(
                    "{ "
                    +   "suspend: { "
                    +     "detach: { " // Remove AllowSorting="true"
                    +       "key: { namespaceURI: 'null', localName: 'AllowSorting' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AllowSorting' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "} "
                    + "}"
                    + "{ "
                    +   "resume: { "
                    +     "attach: { " // Add asp:AllowSorting="true"
                    +       "key: { "
                    +         "namespaceURI: 'http://schemas.microsoft.com/AspNet', "
                    +         "localName: 'AllowSorting' "
                    +       "}, "
                    +       "value: { "
                    +         "quanifiedName: { "
                    +           "namespaceURI: 'http://schemas.microsoft.com/AspNet', "
                    +           "localName: 'AllowSorting' "
                    +         "}, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "} "
                    + "}", 
                    mer.getEventRecordAndClear()
            );
        }
    }
    
    @Test
    public void testChangeKeyToConflictData() {
        
        MapEventRecorder mer = new MapEventRecorder();
        ((MAOrderedMap<QuanifiedName, Attribute>)this.gridView.getAttributes()).addMapElementListener(mer);
        
        Assert.assertNotNull(this.autoGenerateSelectButton.getParent());
        Assert.assertNotNull(this.autoGenerateEditButton.getParent());
        Assert.assertNotNull(this.autoGenerateDeleteButton.getParent());
        
        /*
         * Change the "autoGenerateColumns.quanifiedName.localName" to be "AutoGenerateSelectButton"
         * that is conflict with "autoGenerateSelectButton.quanifiedName.localName"
         */
        {
            this.autoGenerateColumns.getQuanifiedName().setLocalName("AutoGenerateSelectButton");
            
            /*
             * (1) The "this.gridView.getAttributes()" will be adjusted automatically and implicitly.
             * (2) the "autoGenerateSelectColumn" is removed from the map automatically and implicitly.
             */
            Assert.assertFalse(this.gridView.getAttributes().containsKey(new QuanifiedName("AutoGenerateColumns")));
            Assert.assertNull(this.autoGenerateSelectButton.getParent());
            
            /*
             * Why did "this.autoGenerateSelectButton.parent" become null?
             */
            Assert.assertEquals(
                    "{ "
                    +   "suspend: { "
                    // Before change, the "this.autoGenerateColumns" with old data is removed from the map automatically.
                    +     "detach: { "
                    +       "key: { namespaceURI: 'null', localName: 'AutoGenerateColumns' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AutoGenerateColumns' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "} "
                    + "}"
                    + "{ "
                    +   "resume: { "
                    +     "attach: { "
                    // After change, the "this.autoGenerateColumns" with new data is added into the map again automatically.
                    +       "key: { namespaceURI: 'null', localName: 'AutoGenerateSelectButton' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AutoGenerateSelectButton' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "}, "
                    +   "{ "
                    +     "detach: { "
                    /*
                     * (1) The data of "this.autoGenerateSelectButton" is conflict with the new data of "this.autoGenerateColumns",
                     * in order to keep the unique constraint of map-key, this map removes "this.autoGenerateSelectButton".
                     * (2) Then ObjectModel found "this.autoGenerateSelectButton" had been crowded out, in order to keep the
                     * consistency of bidirectional association, ObjectModel clear the parent of "this.autoGenerateSelectButton"
                     * 
                     * That is why "this.autoGenerateSelectButton.parent" is set to be null automatically and implicitly
                     */
                    +       "key: { namespaceURI: 'null', localName: 'AutoGenerateSelectButton' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AutoGenerateSelectButton' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "} "
                    + "}", 
                    mer.getEventRecordAndClear()
            );
            
            /*
             * Now, the whole XML is
             */
            Assert.assertEquals(
                    "<asp:GridView "
                    + "xmlns:asp='http://schemas.microsoft.com/AspNet' "
                    + "ID='GridView1' "
                    + "runat='server' "
                    + "DataSourceId='SqlDataSource1' "
                    
                    // Notes: Though localName is "AutoGenerateSelectButton", 
                    // but this attribute object is "this.autoGenerateColumns!"
                    + "AutoGenerateSelectButton='true' " 
                    
                    + "AutoGenerateEditButton='true' "
                    + "AutoGenerateDeleteButton='true' "
                    + "AllowPaging='true'/>", 
                    XML_BUILDER.build(this.gridView)
            );
        }
        
        /*
         * Change the "autoGenerateColumns.quanifiedName.localName" to be "AutoGenerateEditButton"
         * that is conflict with "autoGenerateEditButton.quanifiedName.localName"
         */
        {
            this.autoGenerateColumns.getQuanifiedName().setLocalName("AutoGenerateEditButton");
            
            /*
             * (1) The "this.gridView.getAttributes()" will be adjusted automatically and implicitly.
             * (2) the "autoGenerateEditButton" is removed from the map automatically and implicitly.
             */
            Assert.assertFalse(this.gridView.getAttributes().containsKey(new QuanifiedName("AutoGenerateSelectButton")));
            Assert.assertNull(this.autoGenerateEditButton.getParent());
            
            /*
             * Why did "this.autoGenerateEditButton.parent" become null?
             */
            Assert.assertEquals(
                    "{ "
                    +   "suspend: { "
                    // Before change, the "this.autoGenerateColumns" with old data is removed from the map automatically.
                    +     "detach: { "
                    +       "key: { namespaceURI: 'null', localName: 'AutoGenerateSelectButton' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AutoGenerateSelectButton' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "} "
                    + "}"
                    + "{ "
                    +   "resume: { "
                    +     "attach: { "
                    // After change, the "this.autoGenerateColumns" with new data is added into the map again automatically.
                    +       "key: { namespaceURI: 'null', localName: 'AutoGenerateEditButton' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AutoGenerateEditButton' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "}, "
                    +   "{ "
                    +     "detach: { "
                    /*
                     * (1) The data of "this.autoGenerateEditButton" is conflict with the new data of "this.autoGenerateColumns",
                     * in order to keep the unique constraint of map-key, this map removes "this.autoGenerateEditButton".
                     * (2) Then ObjectModel found "this.autoGenerateEditButton" had been crowded out, in order to keep the
                     * consistency of bidirectional association, ObjectModel clear the parent of "this.autoGenerateEditButton"
                     * 
                     * That is why "this.autoGenerateEditButton.parent" is set to be null automatically and implicitly
                     */
                    +       "key: { namespaceURI: 'null', localName: 'AutoGenerateEditButton' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AutoGenerateEditButton' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "} "
                    + "}", 
                    mer.getEventRecordAndClear()
            );
            
            /*
             * Now, the whole XML is
             */
            Assert.assertEquals(
                    "<asp:GridView "
                    + "xmlns:asp='http://schemas.microsoft.com/AspNet' "
                    + "ID='GridView1' "
                    + "runat='server' "
                    + "DataSourceId='SqlDataSource1' "
                    
                    // Notes: Though localName is "AutoGenerateEditButton", 
                    // but this attribute object is "this.autoGenerateColumns!"
                    + "AutoGenerateEditButton='true' " 
                    
                    + "AutoGenerateDeleteButton='true' "
                    + "AllowPaging='true'/>", 
                    XML_BUILDER.build(this.gridView)
            );
        }
        
        /*
         * Change the "autoGenerateColumns.quanifiedName.localName" to be "AutoGenerateDeleteButton"
         * that is conflict with "autoGenerateDeleteButton.quanifiedName.localName"
         */
        {
            this.autoGenerateColumns.getQuanifiedName().setLocalName("AutoGenerateDeleteButton");
            
            /*
             * (1) The "this.gridView.getAttributes()" will be adjusted automatically and implicitly.
             * (2) the "autoGenerateDeleteButton" is removed from the map automatically and implicitly.
             */
            Assert.assertFalse(this.gridView.getAttributes().containsKey(new QuanifiedName("AutoGenerateEditButton")));
            Assert.assertNull(this.autoGenerateDeleteButton.getParent());
            
            /*
             * Why did "this.autoGenerateDeleteButton.parent" become null?
             */
            Assert.assertEquals(
                    "{ "
                    +   "suspend: { "
                    // Before change, the "this.autoGenerateColumns" with old data is removed from the map automatically.
                    +     "detach: { "
                    +       "key: { namespaceURI: 'null', localName: 'AutoGenerateEditButton' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AutoGenerateEditButton' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "} "
                    + "}"
                    + "{ "
                    +   "resume: { "
                    +     "attach: { "
                    // After change, the "this.autoGenerateColumns" with new data is added into the map again automatically.
                    +       "key: { namespaceURI: 'null', localName: 'AutoGenerateDeleteButton' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AutoGenerateDeleteButton' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "}, "
                    +   "{ "
                    +     "detach: { "
                    /*
                     * (1) The data of "this.autoGenerateDeleteButton" is conflict with the new data of "this.autoGenerateColumns",
                     * in order to keep the unique constraint of map-key, this map removes "this.autoGenerateDeleteButton".
                     * (2) Then ObjectModel found "this.autoGenerateDeleteButton" had been crowded out, in order to keep the
                     * consistency of bidirectional association, ObjectModel clear the parent of "this.autoGenerateDeleteButton"
                     * 
                     * That is why "this.autoGenerateDeleteButton.parent" is set to be null automatically and implicitly
                     */
                    +       "key: { namespaceURI: 'null', localName: 'AutoGenerateDeleteButton' }, "
                    +       "value: { "
                    +         "quanifiedName: { namespaceURI: 'null', localName: 'AutoGenerateDeleteButton' }, "
                    +         "value: 'true' "
                    +       "} "
                    +     "} "
                    +   "} "
                    + "}", 
                    mer.getEventRecordAndClear()
            );
            
            /*
             * Now, the whole XML is
             */
            Assert.assertEquals(
                    "<asp:GridView "
                    + "xmlns:asp='http://schemas.microsoft.com/AspNet' "
                    + "ID='GridView1' "
                    + "runat='server' "
                    + "DataSourceId='SqlDataSource1' "
                    
                    // Notes: Though localName is "AutoGenerateDeleteButton", 
                    // but this attribute object is "this.autoGenerateColumns!"
                    + "AutoGenerateDeleteButton='true' "
                    
                    + "AllowPaging='true'/>", 
                    XML_BUILDER.build(this.gridView)
            );
        }
    }
    
    private static class MapEventRecorder extends MapElementAdapter<QuanifiedName, Attribute> {
        
        private StringBuilder eventRecordBuilder = new StringBuilder();
        
        public String getEventRecordAndClear() {
            String retval = this.eventRecordBuilder.toString();
            this.eventRecordBuilder.setLength(0);
            return retval;
        }

        @Override
        public void modified(MapElementEvent<QuanifiedName, Attribute> e) throws Throwable {
            if (e.getModification() instanceof MapModifications.SuspendByKeyViaFrozenContext<?, ?>) {
                Assert.assertSame(ModificationType.DETACH, e.getModificationType());
                this
                .eventRecordBuilder
                .append("{ suspend: { detach: { key: ")
                .append(e.getKey(PropertyVersion.DETACH))
                .append(", value: ")
                .append(attributeString(e.getValue(PropertyVersion.DETACH)))
                .append(" } } }");
            } else if (e.getModification() instanceof MapModifications.ResumeViaFrozenContext<?, ?>) {
                Assert.assertNotSame(ModificationType.DETACH, e.getModificationType());
                this
                .eventRecordBuilder
                .append("{ resume: { attach: { key: ")
                .append(e.getKey(PropertyVersion.ATTACH))
                .append(", value: ")
                .append(attributeString(e.getValue(PropertyVersion.ATTACH)))
                .append(" } }");
                if (e.getModificationType() == ModificationType.REPLACE) {
                    this
                    .eventRecordBuilder
                    .append(", { detach: { key: ")
                    .append(e.getKey(PropertyVersion.DETACH))
                    .append(", value: ")
                    .append(attributeString(e.getValue(PropertyVersion.DETACH)))
                    .append(" } }");
                }
                this.eventRecordBuilder.append(" }");
            }
        }
        
        private static String attributeString(Attribute attribute) {
            return "{ quanifiedName: "
                    + attribute.getQuanifiedName() 
                    + ", value: '" + 
                    attribute.getValue() + 
                    "' }";
        }
    }
}
